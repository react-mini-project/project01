{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  isSuccess: false,\n  error: null\n};\nexport const __getTodos = createAsyncThunk(\"todos/getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __addTodo = createAsyncThunk(\"todos/addTodo\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.post(\"http://localhost:3001/todos\", payload);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    isSuccess: true\n  },\n  extraReducers: {\n    [__getTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport const {} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","todos","isLoading","isSuccess","error","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__addTodo","post","todosSlice","name","reducers","extraReducers","pending","state","fulfilled","action","rejected","actions","reducer"],"sources":["/Users/JJY/Desktop/react/dev/project01/src/redux/modules/todosSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  isSuccess: false,\n  error: null,\n};\n\nexport const __getTodos = createAsyncThunk(\n  \"todos/getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __addTodo = createAsyncThunk(\n  \"todos/addTodo\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.post(\"http://localhost:3001/todos\", payload);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    isSuccess: true\n  },\n  extraReducers: {\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport const {} = todosSlice.actions;\nexport default todosSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EADY;EAEnBC,SAAS,EAAE,KAFQ;EAGnBC,SAAS,EAAE,KAHQ;EAInBC,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CACxC,gBADwC,EAExC,OAAOS,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,6BAAV,CAAnB;IACA,OAAOF,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CATuC,CAAnC;AAYP,OAAO,MAAMQ,SAAS,GAAGf,gBAAgB,CACvC,eADuC,EAEvC,OAAOS,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMT,KAAK,CAACc,IAAN,CAAW,6BAAX,EAA0CP,OAA1C,CAAnB;IACA,OAAOC,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CATsC,CAAlC;AAYP,OAAO,MAAMU,UAAU,GAAGhB,WAAW,CAAC;EACpCiB,IAAI,EAAE,OAD8B;EAEpCf,YAFoC;EAGpCgB,QAAQ,EAAE;IACRb,SAAS,EAAE;EADH,CAH0B;EAMpCc,aAAa,EAAE;IACb,CAACZ,UAAU,CAACa,OAAZ,GAAuBC,KAAD,IAAW;MAC/BA,KAAK,CAACjB,SAAN,GAAkB,IAAlB,CAD+B,CACP;IACzB,CAHY;IAIb,CAACG,UAAU,CAACe,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACzCF,KAAK,CAACjB,SAAN,GAAkB,KAAlB,CADyC,CAChB;;MACzBiB,KAAK,CAAClB,KAAN,GAAcoB,MAAM,CAACf,OAArB,CAFyC,CAEX;IAC/B,CAPY;IAQb,CAACD,UAAU,CAACiB,QAAZ,GAAuB,CAACH,KAAD,EAAQE,MAAR,KAAmB;MACxCF,KAAK,CAACjB,SAAN,GAAkB,KAAlB,CADwC,CACf;;MACzBiB,KAAK,CAACf,KAAN,GAAciB,MAAM,CAACf,OAArB,CAFwC,CAEV;IAC/B;EAXY;AANqB,CAAD,CAA9B;AAqBP,OAAO,MAAM,KAAKQ,UAAU,CAACS,OAAtB;AACP,eAAeT,UAAU,CAACU,OAA1B"},"metadata":{},"sourceType":"module"}