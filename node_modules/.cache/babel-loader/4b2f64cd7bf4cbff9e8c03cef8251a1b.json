{"ast":null,"code":"var _jsxFileName = \"/Users/JJY/Desktop/react/dev/week-react-03/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\"; // axios import 합니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const fetchING = () => {\n    const {\n      data\n    } = axios.get(\"http://cheolsu.shop/\");\n  };\n\n  useEffect(() => {\n    fetchING();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App; // const App = () => {\n// \t// 새롭게 생성하는 todo를 관리하는 state\n// \tconst [todo, setTodo] = useState({\n// \t\ttitle: \"\",\n// \t})\n// \tconst [todos, setTodos] = useState(null)\n// \t// patch에서 사용할 id, 수정값의 state를 추가\n// \tconst [targetID, setTargetID] = useState(null)\n// \tconst [editTodo, setEditTodo] = useState({\n// \t\ttitle: \"\",\n// \t})\n// \t// axios를 통해서 get 요청을 하는 함수를 생성합니다.\n// \t// 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n// \tconst fetchTodos = () => {\n// \t\t// const {data} = await axios.get(\"http://localhost:3001/todos\")\n// \t\tconst {data} = axios.get(\"http://cheolsu.shop/\")\n// \t\tsetTodos(data)  // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n// \t}\n// \tconst onSubmitHandler = async (todo) => {\n// \t\tawait axios.post(\"http://localhost:3001/todos\", todo)\n// \t\tfetchTodos()\n// \t}\n// \t// 새롭게 추가한 삭제 버튼 이벤트 핸들러\n// \tconst onClickDeleteButtonHandler = async (todoID) => {\n// \t\tawait axios.delete(`http://localhost:3001/todos/${todoID}`)\n// \t\tfetchTodos()\n// \t}\n// \t// 수정버튼 이벤트 핸들러 추가\n// \tconst onClickEditButtonHandler = async (todoID, edit) => {\n// \t\tawait axios.patch(`http://localhost:3001/todos/${todoID}`, edit)\n// \t\tfetchTodos()\n// \t} \n// \t// 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n// \tuseEffect(()=> {\n// \t\t// effect 구문에 생성한 함수를 넣어 실행합니다.\n// \t\tfetchTodos()\n// \t},[])\n// \t// data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n// \tconsole.log(todos)\n// \treturn (\n// \t\t<div>\n// \t\t\t<form onSubmit={(e)=> {\n// \t\t\t\t// submit했을 때 브라우저의 새로고침을 방지합니다.\n// \t\t\t\te.preventDefault();\n// \t\t\t\tonSubmitHandler(todo)\n// \t\t\t\tsetTodo({title:\"\"})\n// \t\t\t}}>\n// \t\t\t\t{/* 수정기능에 필요한 id, 수정값 input 2개와 수정하기 버튼을 추가 */}\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={targetID}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"수정하고 싶은 Todo ID\"\n// \t\t\t\t\tonChange={(e) => {\n// \t\t\t\t\t\tsetTargetID(e.target.value)\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={editTodo.title}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"수정값 입력\"\n// \t\t\t\t\tonChange={(e) => {\n// \t\t\t\t\t\tsetEditTodo({\n// \t\t\t\t\t\t\t...editTodo, title: e.target.value\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<button\n// \t\t\t\t\t// type='button'을 추가해야 form의 영향에서 벗어남\n// \t\t\t\t\ttype=\"button\"\n// \t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\tonClickEditButtonHandler(targetID, editTodo)\n// \t\t\t\t\t\tsetTargetID(null)\n// \t\t\t\t\t\tsetEditTodo({title:\"\"})\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\t수정하기\n// \t\t\t\t</button>\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={todo.title}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tonChange={(e)=> {\n// \t\t\t\t\t\tconst {value} = e.target;\n// \t\t\t\t\t\tsetTodo({\n// \t\t\t\t\t\t\t...todo, title: value\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<button>추가하기</button>\n// \t\t\t</form>\n// \t\t\t<div>\n// \t\t\t\t{todos?.map((todo)=> (\n// \t\t\t\t\t<div key={todo.id}>\n// \t\t\t\t\t\t{todo.title}\n// \t\t\t\t\t\t{/* 디자인이 요상하긴 하지만, 삭제 버튼 추가! */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\ttype=\"button\"\n// \t\t\t\t\t\t\tonClick={()=>onClickDeleteButtonHandler(todo.id)}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t삭제하기\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","App","fetchING","data","get"],"sources":["/Users/JJY/Desktop/react/dev/week-react-03/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\" // axios import 합니다.\n\nconst App = () => {\n\tconst fetchING = () => {\n\t\tconst {data} = axios.get(\"http://cheolsu.shop/\")\n\t}\n\tuseEffect(()=> {\n\t\tfetchING()\n\t},[])\n\treturn (\n\t\t<div>\n\n\t\t</div>\n\t)\n}\nexport default App\n\n// const App = () => {\n// \t// 새롭게 생성하는 todo를 관리하는 state\n// \tconst [todo, setTodo] = useState({\n// \t\ttitle: \"\",\n// \t})\n\n// \tconst [todos, setTodos] = useState(null)\n\n// \t// patch에서 사용할 id, 수정값의 state를 추가\n// \tconst [targetID, setTargetID] = useState(null)\n// \tconst [editTodo, setEditTodo] = useState({\n// \t\ttitle: \"\",\n// \t})\n\n// \t// axios를 통해서 get 요청을 하는 함수를 생성합니다.\n// \t// 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n// \tconst fetchTodos = () => {\n// \t\t// const {data} = await axios.get(\"http://localhost:3001/todos\")\n// \t\tconst {data} = axios.get(\"http://cheolsu.shop/\")\n// \t\tsetTodos(data)  // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n// \t}\n\t\n// \tconst onSubmitHandler = async (todo) => {\n// \t\tawait axios.post(\"http://localhost:3001/todos\", todo)\n// \t\tfetchTodos()\n// \t}\n\n// \t// 새롭게 추가한 삭제 버튼 이벤트 핸들러\n// \tconst onClickDeleteButtonHandler = async (todoID) => {\n// \t\tawait axios.delete(`http://localhost:3001/todos/${todoID}`)\n// \t\tfetchTodos()\n// \t}\n\n// \t// 수정버튼 이벤트 핸들러 추가\n// \tconst onClickEditButtonHandler = async (todoID, edit) => {\n// \t\tawait axios.patch(`http://localhost:3001/todos/${todoID}`, edit)\n// \t\tfetchTodos()\n// \t} \n\n// \t// 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n// \tuseEffect(()=> {\n// \t\t// effect 구문에 생성한 함수를 넣어 실행합니다.\n// \t\tfetchTodos()\n// \t},[])\n\n// \t// data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n// \tconsole.log(todos)\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<form onSubmit={(e)=> {\n// \t\t\t\t// submit했을 때 브라우저의 새로고침을 방지합니다.\n// \t\t\t\te.preventDefault();\n// \t\t\t\tonSubmitHandler(todo)\n// \t\t\t\tsetTodo({title:\"\"})\n// \t\t\t}}>\n// \t\t\t\t{/* 수정기능에 필요한 id, 수정값 input 2개와 수정하기 버튼을 추가 */}\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={targetID}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"수정하고 싶은 Todo ID\"\n// \t\t\t\t\tonChange={(e) => {\n// \t\t\t\t\t\tsetTargetID(e.target.value)\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={editTodo.title}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"수정값 입력\"\n// \t\t\t\t\tonChange={(e) => {\n// \t\t\t\t\t\tsetEditTodo({\n// \t\t\t\t\t\t\t...editTodo, title: e.target.value\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<button\n// \t\t\t\t\t// type='button'을 추가해야 form의 영향에서 벗어남\n// \t\t\t\t\ttype=\"button\"\n// \t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\tonClickEditButtonHandler(targetID, editTodo)\n// \t\t\t\t\t\tsetTargetID(null)\n// \t\t\t\t\t\tsetEditTodo({title:\"\"})\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\t수정하기\n// \t\t\t\t</button>\n// \t\t\t\t<input\n// \t\t\t\t\tvalue={todo.title}\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tonChange={(e)=> {\n// \t\t\t\t\t\tconst {value} = e.target;\n// \t\t\t\t\t\tsetTodo({\n// \t\t\t\t\t\t\t...todo, title: value\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t\t<button>추가하기</button>\n// \t\t\t</form>\n// \t\t\t<div>\n// \t\t\t\t{todos?.map((todo)=> (\n// \t\t\t\t\t<div key={todo.id}>\n// \t\t\t\t\t\t{todo.title}\n// \t\t\t\t\t\t{/* 디자인이 요상하긴 하지만, 삭제 버튼 추가! */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\ttype=\"button\"\n// \t\t\t\t\t\t\tonClick={()=>onClickDeleteButtonHandler(todo.id)}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t삭제하기\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// export default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA0B;;;;AAE1B,MAAMC,GAAG,GAAG,MAAM;EAAA;;EACjB,MAAMC,QAAQ,GAAG,MAAM;IACtB,MAAM;MAACC;IAAD,IAASH,KAAK,CAACI,GAAN,CAAU,sBAAV,CAAf;EACA,CAFD;;EAGAN,SAAS,CAAC,MAAK;IACdI,QAAQ;EACR,CAFQ,EAEP,EAFO,CAAT;EAGA,oBACC;IAAA;IAAA;IAAA;EAAA,QADD;AAKA,CAZD;;GAAMD,G;;KAAAA,G;AAaN,eAAeA,GAAf},"metadata":{},"sourceType":"module"}