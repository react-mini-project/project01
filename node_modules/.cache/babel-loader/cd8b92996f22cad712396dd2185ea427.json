{"ast":null,"code":"import _slicedToArray from\"/Users/JJY/Desktop/project01/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useCallback,useState}from\"react\";var useInput=function useInput(){// 2. value는 useState로 관리하고,\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// 3. 핸들러 로직도 구현합니다.\nvar handler=function handler(e){setValue(e.target.value);};var reset=useCallback(function(){return setValue(\"\");});// 1. 이 훅은 [ ] 을 반환하는데, 첫번째는 value, 두번째는 핸들러를 반환합니다.\nreturn[value,handler,reset];};export default useInput;","map":{"version":3,"names":["useCallback","useState","useInput","value","setValue","handler","e","target","reset"],"sources":["/Users/JJY/Desktop/project01/src/hooks/useInput.js"],"sourcesContent":["import { useCallback, useState } from \"react\"\n\nconst useInput = () => {\n    // 2. value는 useState로 관리하고,\n    const [value, setValue] = useState(\"\")\n\n    // 3. 핸들러 로직도 구현합니다.\n    const handler = (e) => {\n        setValue(e.target.value)\n    }\n    \n    const reset = useCallback(()=> setValue(\"\"))\n\n    // 1. 이 훅은 [ ] 을 반환하는데, 첫번째는 value, 두번째는 핸들러를 반환합니다.\n    return [value, handler, reset]\n}\n\nexport default useInput\n"],"mappings":"kHAAA,OAASA,WAAT,CAAsBC,QAAtB,KAAsC,OAAtC,CAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,EAAM,CACnB;AACA,cAA0BD,QAAQ,CAAC,EAAD,CAAlC,wCAAOE,KAAP,eAAcC,QAAd,eAEA;AACA,GAAMC,QAAO,CAAG,QAAVA,QAAU,CAACC,CAAD,CAAO,CACnBF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR,CACH,CAFD,CAIA,GAAMK,MAAK,CAAGR,WAAW,CAAC,iBAAKI,SAAQ,CAAC,EAAD,CAAb,EAAD,CAAzB,CAEA;AACA,MAAO,CAACD,KAAD,CAAQE,OAAR,CAAiBG,KAAjB,CAAP,CACH,CAbD,CAeA,cAAeN,SAAf"},"metadata":{},"sourceType":"module"}