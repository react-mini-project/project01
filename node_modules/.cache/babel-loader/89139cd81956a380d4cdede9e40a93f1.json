{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  todo: {},\n  isLoading: false,\n  isSuccess: false,\n  error: null\n};\nexport const __getTodo = createAsyncThunk(\"todo/getTodo\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(`http://localhost:3001/todos/${payload}`);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [__getTodo.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodo.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.todo = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodo.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport const {} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","todo","isLoading","isSuccess","error","__getTodo","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","todoSlice","name","reducers","extraReducers","pending","state","fulfilled","action","rejected","actions","reducer"],"sources":["/Users/JJY/Desktop/react/dev/project01/src/redux/modules/todoSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  todo: {},\n  isLoading: false,\n  isSuccess: false,\n  error: null,\n};\n\nexport const __getTodo = createAsyncThunk(\n  \"todo/getTodo\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(`http://localhost:3001/todos/${payload}`);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {\n  },\n  extraReducers: {\n    [__getTodo.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodo.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todo = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodo.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport const {} = todoSlice.actions;\nexport default todoSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EADa;EAEnBC,SAAS,EAAE,KAFQ;EAGnBC,SAAS,EAAE,KAHQ;EAInBC,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,SAAS,GAAGR,gBAAgB,CACvC,cADuC,EAEvC,OAAOS,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,+BAA8BH,OAAQ,EAAjD,CAAnB;IACA,OAAOC,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CATsC,CAAlC;AAYP,OAAO,MAAMQ,SAAS,GAAGd,WAAW,CAAC;EACnCe,IAAI,EAAE,MAD6B;EAEnCb,YAFmC;EAGnCc,QAAQ,EAAE,EAHyB;EAKnCC,aAAa,EAAE;IACb,CAACV,SAAS,CAACW,OAAX,GAAsBC,KAAD,IAAW;MAC9BA,KAAK,CAACf,SAAN,GAAkB,IAAlB,CAD8B,CACN;IACzB,CAHY;IAIb,CAACG,SAAS,CAACa,SAAX,GAAuB,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACxCF,KAAK,CAACf,SAAN,GAAkB,KAAlB,CADwC,CACf;;MACzBe,KAAK,CAAChB,IAAN,GAAakB,MAAM,CAACb,OAApB,CAFwC,CAEX;IAC9B,CAPY;IAQb,CAACD,SAAS,CAACe,QAAX,GAAsB,CAACH,KAAD,EAAQE,MAAR,KAAmB;MACvCF,KAAK,CAACf,SAAN,GAAkB,KAAlB,CADuC,CACd;;MACzBe,KAAK,CAACb,KAAN,GAAce,MAAM,CAACb,OAArB,CAFuC,CAET;IAC/B;EAXY;AALoB,CAAD,CAA7B;AAoBP,OAAO,MAAM,KAAKM,SAAS,CAACS,OAArB;AACP,eAAeT,SAAS,CAACU,OAAzB"},"metadata":{},"sourceType":"module"}