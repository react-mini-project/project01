{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  todo: {},\n  isLoading: false,\n  isSuccess: false,\n  error: null\n};\nexport const __getTodo = createAsyncThunk(\"todo/getTodo\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(`http://localhost:3001/todos/${payload}`);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __patchTodo = createAsyncThunk(\"todos/patchTodo\", async (payload, thunkAPI) => {\n  try {\n    await axios.patch(`http://localhost:3001/todos/${payload.id}`, payload);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [__getTodo.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodo.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.todo = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodo.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__patchTodo.pending]: state => {\n      state.isLoading = true;\n    },\n    [__patchTodo.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(\"hello\"); // state.todo = state.todos.map((todo) => {\n      //     console.log(todo.id, action.payload.id)\n      //     if (+todo.id === +action.payload.id) {\n      //         console.log(action.payload)\n      //         return { ...todo, content: action.payload.content }\n      //     }\n      // }\n      // )\n      // if (todo.id === action.payload.id) {\n      //   todo = [...todo, action.payload.content]\n      // }\n    },\n    [__patchTodo.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","todo","isLoading","isSuccess","error","__getTodo","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__patchTodo","patch","id","todoSlice","name","reducers","extraReducers","pending","state","fulfilled","action","rejected","console","log","actions","reducer"],"sources":["/Users/JJY/Desktop/react/dev/project01/src/redux/modules/todoSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n    todo: {},\n    isLoading: false,\n    isSuccess: false,\n    error: null,\n};\n\nexport const __getTodo = createAsyncThunk(\n    \"todo/getTodo\",\n    async (payload, thunkAPI) => {\n        try {\n            const data = await axios.get(`http://localhost:3001/todos/${payload}`);\n            return thunkAPI.fulfillWithValue(data.data);\n        } catch (error) {\n            return thunkAPI.rejectWithValue(error);\n        }\n    }\n);\nexport const __patchTodo = createAsyncThunk(\n    \"todos/patchTodo\",\n    async (payload, thunkAPI) => {\n      try {\n        await axios.patch(`http://localhost:3001/todos/${payload.id}`, payload);\n        return thunkAPI.fulfillWithValue(payload);\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error);\n      }\n    }\n  );\n\nexport const todoSlice = createSlice({\n    name: \"todo\",\n    initialState,\n    reducers: {\n    },\n    extraReducers: {\n        [__getTodo.pending]: (state) => {\n            state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n        },\n        [__getTodo.fulfilled]: (state, action) => {\n            state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n            state.todo = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n        },\n        [__getTodo.rejected]: (state, action) => {\n            state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n            state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n        },\n        [__patchTodo.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [__patchTodo.fulfilled]: (state, action) => {\n            state.isLoading = false;\n            console.log(\"hello\")\n            // state.todo = state.todos.map((todo) => {\n            //     console.log(todo.id, action.payload.id)\n            //     if (+todo.id === +action.payload.id) {\n            //         console.log(action.payload)\n            //         return { ...todo, content: action.payload.content }\n            //     }\n            // }\n            // )\n\n            // if (todo.id === action.payload.id) {\n\n            //   todo = [...todo, action.payload.content]\n            // }\n\n        },\n        [__patchTodo.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.error = action.payload;\n        },\n    },\n});\n\nexport const { } = todoSlice.actions;\nexport default todoSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,EADW;EAEjBC,SAAS,EAAE,KAFM;EAGjBC,SAAS,EAAE,KAHM;EAIjBC,KAAK,EAAE;AAJU,CAArB;AAOA,OAAO,MAAMC,SAAS,GAAGR,gBAAgB,CACrC,cADqC,EAErC,OAAOS,OAAP,EAAgBC,QAAhB,KAA6B;EACzB,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,+BAA8BH,OAAQ,EAAjD,CAAnB;IACA,OAAOC,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACH,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACZ,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACH;AACJ,CAToC,CAAlC;AAWP,OAAO,MAAMQ,WAAW,GAAGf,gBAAgB,CACvC,iBADuC,EAEvC,OAAOS,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMR,KAAK,CAACc,KAAN,CAAa,+BAA8BP,OAAO,CAACQ,EAAG,EAAtD,EAAyDR,OAAzD,CAAN;IACA,OAAOC,QAAQ,CAACG,gBAAT,CAA0BJ,OAA1B,CAAP;EACD,CAHD,CAGE,OAAOF,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CATsC,CAApC;AAYP,OAAO,MAAMW,SAAS,GAAGjB,WAAW,CAAC;EACjCkB,IAAI,EAAE,MAD2B;EAEjChB,YAFiC;EAGjCiB,QAAQ,EAAE,EAHuB;EAKjCC,aAAa,EAAE;IACX,CAACb,SAAS,CAACc,OAAX,GAAsBC,KAAD,IAAW;MAC5BA,KAAK,CAAClB,SAAN,GAAkB,IAAlB,CAD4B,CACJ;IAC3B,CAHU;IAIX,CAACG,SAAS,CAACgB,SAAX,GAAuB,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACtCF,KAAK,CAAClB,SAAN,GAAkB,KAAlB,CADsC,CACb;;MACzBkB,KAAK,CAACnB,IAAN,GAAaqB,MAAM,CAAChB,OAApB,CAFsC,CAET;IAChC,CAPU;IAQX,CAACD,SAAS,CAACkB,QAAX,GAAsB,CAACH,KAAD,EAAQE,MAAR,KAAmB;MACrCF,KAAK,CAAClB,SAAN,GAAkB,KAAlB,CADqC,CACZ;;MACzBkB,KAAK,CAAChB,KAAN,GAAckB,MAAM,CAAChB,OAArB,CAFqC,CAEP;IACjC,CAXU;IAYX,CAACM,WAAW,CAACO,OAAb,GAAwBC,KAAD,IAAW;MAC9BA,KAAK,CAAClB,SAAN,GAAkB,IAAlB;IACH,CAdU;IAeX,CAACU,WAAW,CAACS,SAAb,GAAyB,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACxCF,KAAK,CAAClB,SAAN,GAAkB,KAAlB;MACAsB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAFwC,CAGxC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MAEA;MACA;IAEH,CAhCU;IAiCX,CAACb,WAAW,CAACW,QAAb,GAAwB,CAACH,KAAD,EAAQE,MAAR,KAAmB;MACvCF,KAAK,CAAClB,SAAN,GAAkB,KAAlB;MACAkB,KAAK,CAAChB,KAAN,GAAckB,MAAM,CAAChB,OAArB;IACH;EApCU;AALkB,CAAD,CAA7B;AA6CP,OAAO,MAAM,KAAMS,SAAS,CAACW,OAAtB;AACP,eAAeX,SAAS,CAACY,OAAzB"},"metadata":{},"sourceType":"module"}