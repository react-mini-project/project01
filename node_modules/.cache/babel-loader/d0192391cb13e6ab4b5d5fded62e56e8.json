{"ast":null,"code":"var _jsxFileName = \"/Users/JJY/Desktop/react/dev/week-react-03/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\"; // axios import 합니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // 새롭게 생성하는 todo를 관리하는 state\n  const [todo, setTodo] = useState({\n    title: \"\"\n  });\n  const [todos, setTodos] = useState(null); // patch에서 사용할 id, 수정값의 state를 추가\n\n  const [targetID, setTargetID] = useState(null);\n  const [editTodo, setEditTodo] = useState({\n    title: \"\"\n  }); // axios를 통해서 get 요청을 하는 함수를 생성합니다.\n  // 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n  // const fetchTodos = async () => {\n  // \tconst {data} = await axios.get(\"http://3.36.96.74/posts\")\n  // \tsetTodos(data)  // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n  // }\n\n  const getApi = async () => {\n    axios.get(\"http://100.24.18.154:3000/post\").then(res => console.log(res.data));\n  };\n\n  const testDB = async () => {\n    const {\n      data\n    } = axios.get(\"http://100.24.18.154:3000/post\");\n    setTodos(data);\n  }; // const getApi = async () => {\n  // \tconst data = await axios.get(\"https://cors-anywhere.herokuapp.com/http://3.36.96.74/posts\").then((res)=>res.data.post)\n  // \tsetTodos(data)\n  // }\n\n\n  useEffect(() => {\n    // getApi()\n    testDB();\n  }, []);\n  console.log(todos); // const onSubmitHandler = async (todo) => {\n  // \tawait axios.post(\"http://localhost:3001/todos\", todo)\n  // \tfetchTodos()\n  // }\n  // // 새롭게 추가한 삭제 버튼 이벤트 핸들러\n  // const onClickDeleteButtonHandler = async (todoID) => {\n  // \tawait axios.delete(`http://localhost:3001/todos/${todoID}`)\n  // \tfetchTodos()\n  // }\n  // // 수정버튼 이벤트 핸들러 추가\n  // const onClickEditButtonHandler = async (todoID, edit) => {\n  // \tawait axios.patch(`http://localhost:3001/todos/${todoID}`, edit)\n  // \tfetchTodos()\n  // } \n  // 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n\n  useEffect(() => {\n    // effect 구문에 생성한 함수를 넣어 실행합니다.\n    // fetchTodos()\n    getApi();\n  }, []); // data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n\n  console.log(todos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"API \\uC5F0\\uACB0\\uD558\\uACE0 \\uC2F6\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this) // <div>\n  // \t<form onSubmit={(e)=> {\n  // \t\t// submit했을 때 브라우저의 새로고침을 방지합니다.\n  // \t\te.preventDefault();\n  // \t\tonSubmitHandler(todo)\n  // \t\tsetTodo({title:\"\"})\n  // \t}}>\n  // \t\t{/* 수정기능에 필요한 id, 수정값 input 2개와 수정하기 버튼을 추가 */}\n  // \t\t<input\n  // \t\t\tvalue={targetID}\n  // \t\t\ttype=\"text\"\n  // \t\t\tplaceholder=\"수정하고 싶은 Todo ID\"\n  // \t\t\tonChange={(e) => {\n  // \t\t\t\tsetTargetID(e.target.value)\n  // \t\t\t}}\n  // \t\t/>\n  // \t\t<input\n  // \t\t\tvalue={editTodo.title}\n  // \t\t\ttype=\"text\"\n  // \t\t\tplaceholder=\"수정값 입력\"\n  // \t\t\tonChange={(e) => {\n  // \t\t\t\tsetEditTodo({\n  // \t\t\t\t\t...editTodo, title: e.target.value\n  // \t\t\t\t})\n  // \t\t\t}}\n  // \t\t/>\n  // \t\t<button\n  // \t\t\t// type='button'을 추가해야 form의 영향에서 벗어남\n  // \t\t\ttype=\"button\"\n  // \t\t\tonClick={() => {\n  // \t\t\t\tonClickEditButtonHandler(targetID, editTodo)\n  // \t\t\t\tsetTargetID(null)\n  // \t\t\t\tsetEditTodo({title:\"\"})\n  // \t\t\t}}\n  // \t\t>\n  // \t\t\t수정하기\n  // \t\t</button>\n  // \t\t<input\n  // \t\t\tvalue={todo.title}\n  // \t\t\ttype=\"text\"\n  // \t\t\tonChange={(e)=> {\n  // \t\t\t\tconst {value} = e.target;\n  // \t\t\t\tsetTodo({\n  // \t\t\t\t\t...todo, title: value\n  // \t\t\t\t})\n  // \t\t\t}}\n  // \t\t/>\n  // \t\t<button>추가하기</button>\n  // \t</form>\n  // \t<div>\n  // \t\t{todos?.map((todo)=> (\n  // \t\t\t<div key={todo.id}>\n  // \t\t\t\t{todo.title}\n  // \t\t\t\t{/* 디자인이 요상하긴 하지만, 삭제 버튼 추가! */}\n  // \t\t\t\t<button\n  // \t\t\t\t\ttype=\"button\"\n  // \t\t\t\t\tonClick={()=>onClickDeleteButtonHandler(todo.id)}\n  // \t\t\t\t>\n  // \t\t\t\t\t삭제하기\n  // \t\t\t\t</button>\n  // \t\t\t</div>\n  // \t\t))}\n  // \t</div>\n  // </div>\n  ;\n};\n\n_s(App, \"IXaLFEvL7X9rCPtkdqDF3r6blgQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","App","todo","setTodo","title","todos","setTodos","targetID","setTargetID","editTodo","setEditTodo","getApi","get","then","res","console","log","data","testDB"],"sources":["/Users/JJY/Desktop/react/dev/week-react-03/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\" // axios import 합니다.\n\nconst App = () => {\n\t// 새롭게 생성하는 todo를 관리하는 state\n\tconst [todo, setTodo] = useState({\n\t\ttitle: \"\",\n\t})\n\n\tconst [todos, setTodos] = useState(null)\n\n\t// patch에서 사용할 id, 수정값의 state를 추가\n\tconst [targetID, setTargetID] = useState(null)\n\tconst [editTodo, setEditTodo] = useState({\n\t\ttitle: \"\",\n\t})\n\t\n\t// axios를 통해서 get 요청을 하는 함수를 생성합니다.\n\t// 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n\t// const fetchTodos = async () => {\n\t// \tconst {data} = await axios.get(\"http://3.36.96.74/posts\")\n\t\t\n\t// \tsetTodos(data)  // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n\t// }\n\n\n\tconst getApi = async () => {\n\t\taxios.get(\"http://100.24.18.154:3000/post\").then((res)=>console.log(res.data))\n\t}\n\n\tconst testDB = async () => {\n\t\tconst {data} = axios.get(\"http://100.24.18.154:3000/post\")\n\t\tsetTodos(data)\n\t}\n\n\n\t// const getApi = async () => {\n\t// \tconst data = await axios.get(\"https://cors-anywhere.herokuapp.com/http://3.36.96.74/posts\").then((res)=>res.data.post)\n\t// \tsetTodos(data)\n\t// }\n\n\tuseEffect(()=> {\n\t\t// getApi()\n\t\ttestDB()\n\t},[])\n\tconsole.log(todos)\n\t\n\t// const onSubmitHandler = async (todo) => {\n\t// \tawait axios.post(\"http://localhost:3001/todos\", todo)\n\t// \tfetchTodos()\n\t// }\n\n\t// // 새롭게 추가한 삭제 버튼 이벤트 핸들러\n\t// const onClickDeleteButtonHandler = async (todoID) => {\n\t// \tawait axios.delete(`http://localhost:3001/todos/${todoID}`)\n\t// \tfetchTodos()\n\t// }\n\n\t// // 수정버튼 이벤트 핸들러 추가\n\t// const onClickEditButtonHandler = async (todoID, edit) => {\n\t// \tawait axios.patch(`http://localhost:3001/todos/${todoID}`, edit)\n\t// \tfetchTodos()\n\t// } \n\n\t// 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n\tuseEffect(()=> {\n\t\t// effect 구문에 생성한 함수를 넣어 실행합니다.\n\t\t// fetchTodos()\n\t\tgetApi()\n\t},[])\n\n\t// data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n\tconsole.log(todos)\n\n\treturn (\n\t\t<div>\n\t\t\tAPI 연결하고 싶다\n\t\t</div>\n\t\t// <div>\n\t\t// \t<form onSubmit={(e)=> {\n\t\t// \t\t// submit했을 때 브라우저의 새로고침을 방지합니다.\n\t\t// \t\te.preventDefault();\n\t\t// \t\tonSubmitHandler(todo)\n\t\t// \t\tsetTodo({title:\"\"})\n\t\t// \t}}>\n\t\t// \t\t{/* 수정기능에 필요한 id, 수정값 input 2개와 수정하기 버튼을 추가 */}\n\t\t// \t\t<input\n\t\t// \t\t\tvalue={targetID}\n\t\t// \t\t\ttype=\"text\"\n\t\t// \t\t\tplaceholder=\"수정하고 싶은 Todo ID\"\n\t\t// \t\t\tonChange={(e) => {\n\t\t// \t\t\t\tsetTargetID(e.target.value)\n\t\t// \t\t\t}}\n\t\t// \t\t/>\n\t\t// \t\t<input\n\t\t// \t\t\tvalue={editTodo.title}\n\t\t// \t\t\ttype=\"text\"\n\t\t// \t\t\tplaceholder=\"수정값 입력\"\n\t\t// \t\t\tonChange={(e) => {\n\t\t// \t\t\t\tsetEditTodo({\n\t\t// \t\t\t\t\t...editTodo, title: e.target.value\n\t\t// \t\t\t\t})\n\t\t// \t\t\t}}\n\t\t// \t\t/>\n\t\t// \t\t<button\n\t\t// \t\t\t// type='button'을 추가해야 form의 영향에서 벗어남\n\t\t// \t\t\ttype=\"button\"\n\t\t// \t\t\tonClick={() => {\n\t\t// \t\t\t\tonClickEditButtonHandler(targetID, editTodo)\n\t\t// \t\t\t\tsetTargetID(null)\n\t\t// \t\t\t\tsetEditTodo({title:\"\"})\n\t\t// \t\t\t}}\n\t\t// \t\t>\n\t\t// \t\t\t수정하기\n\t\t// \t\t</button>\n\t\t// \t\t<input\n\t\t// \t\t\tvalue={todo.title}\n\t\t// \t\t\ttype=\"text\"\n\t\t// \t\t\tonChange={(e)=> {\n\t\t// \t\t\t\tconst {value} = e.target;\n\t\t// \t\t\t\tsetTodo({\n\t\t// \t\t\t\t\t...todo, title: value\n\t\t// \t\t\t\t})\n\t\t// \t\t\t}}\n\t\t// \t\t/>\n\t\t// \t\t<button>추가하기</button>\n\t\t// \t</form>\n\t\t// \t<div>\n\t\t// \t\t{todos?.map((todo)=> (\n\t\t// \t\t\t<div key={todo.id}>\n\t\t// \t\t\t\t{todo.title}\n\t\t// \t\t\t\t{/* 디자인이 요상하긴 하지만, 삭제 버튼 추가! */}\n\t\t// \t\t\t\t<button\n\t\t// \t\t\t\t\ttype=\"button\"\n\t\t// \t\t\t\t\tonClick={()=>onClickDeleteButtonHandler(todo.id)}\n\t\t// \t\t\t\t>\n\t\t// \t\t\t\t\t삭제하기\n\t\t// \t\t\t\t</button>\n\t\t// \t\t\t</div>\n\t\t// \t\t))}\n\t\t// \t</div>\n\t\t// </div>\n\t)\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA0B;;;;AAE1B,MAAMC,GAAG,GAAG,MAAM;EAAA;;EACjB;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC;IAChCK,KAAK,EAAE;EADyB,CAAD,CAAhC;EAIA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC,CANiB,CAQjB;;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC;IACxCK,KAAK,EAAE;EADiC,CAAD,CAAxC,CAViB,CAcjB;EACA;EACA;EACA;EAEA;EACA;;EAGA,MAAMO,MAAM,GAAG,YAAY;IAC1BX,KAAK,CAACY,GAAN,CAAU,gCAAV,EAA4CC,IAA5C,CAAkDC,GAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,CAAxD;EACA,CAFD;;EAIA,MAAMC,MAAM,GAAG,YAAY;IAC1B,MAAM;MAACD;IAAD,IAASjB,KAAK,CAACY,GAAN,CAAU,gCAAV,CAAf;IACAN,QAAQ,CAACW,IAAD,CAAR;EACA,CAHD,CA3BiB,CAiCjB;EACA;EACA;EACA;;;EAEAnB,SAAS,CAAC,MAAK;IACd;IACAoB,MAAM;EACN,CAHQ,EAGP,EAHO,CAAT;EAIAH,OAAO,CAACC,GAAR,CAAYX,KAAZ,EA1CiB,CA4CjB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;;EACAP,SAAS,CAAC,MAAK;IACd;IACA;IACAa,MAAM;EACN,CAJQ,EAIP,EAJO,CAAT,CA9DiB,CAoEjB;;EACAI,OAAO,CAACC,GAAR,CAAYX,KAAZ;EAEA,oBACC;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADD,CAIC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAnED;AAqEA,CA5ID;;GAAMJ,G;;KAAAA,G;AA8IN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}