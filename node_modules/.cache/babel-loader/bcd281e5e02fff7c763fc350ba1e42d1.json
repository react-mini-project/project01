{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  comments: [],\n  isLoading: false,\n  isSuccess: false,\n  error: null\n};\nexport const __getComments = createAsyncThunk(\"comments/getComments\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/comments\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __addComment = createAsyncThunk(\"comments/addComment\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.post(\"http://localhost:3001/comments\", payload);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __deleteComment = createAsyncThunk(\"comments/deleteComment\", async (payload, thunkAPI) => {\n  try {\n    await axios.delete(`http://localhost:3001/comments/${payload}`);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    clearTodo: (state, action) => {\n      state.isSuccess = true;\n    }\n  },\n  extraReducers: {\n    [__getComments.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.comments = action.payload; // Store에 있는 comments에 서버에서 가져온 comments를 넣습니다.\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__addComment.pending]: state => {\n      state.isLoading = true;\n      state.isSuccess = false;\n    },\n    [__addComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments = [...state.comments, action.payload];\n    },\n    [__addComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__deleteComment.pending]: state => {\n      state.isLoading = true;\n      state.isSuccess = false;\n    },\n    [__deleteComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments = state.comments.filter(comment => comment.id !== action.payload);\n    },\n    [__deleteComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport const {} = commentsSlice.actions;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","comments","isLoading","isSuccess","error","__getComments","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__addComment","post","__deleteComment","delete","commentsSlice","name","reducers","clearTodo","state","action","extraReducers","pending","fulfilled","rejected","filter","comment","id","actions","reducer"],"sources":["/Users/JJY/Desktop/react/dev/project01/src/redux/modules/commentsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  comments: [],\n  isLoading: false,\n  isSuccess: false,\n  error: null,\n};\n\nexport const __getComments = createAsyncThunk(\n  \"comments/getComments\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/comments\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __addComment = createAsyncThunk(\n  \"comments/addComment\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.post(\"http://localhost:3001/comments\", payload);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __deleteComment = createAsyncThunk(\n  \"comments/deleteComment\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.delete(`http://localhost:3001/comments/${payload}`);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    clearTodo: (state, action) => {\n      state.isSuccess = true\n    }\n  },\n  extraReducers: {\n    [__getComments.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload; // Store에 있는 comments에 서버에서 가져온 comments를 넣습니다.\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__addComment.pending]: (state) => {\n      state.isLoading = true;\n      state.isSuccess = false;\n    },\n    [__addComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments = [...state.comments, action.payload]\n    },\n    [__addComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__deleteComment.pending]: (state) => {\n      state.isLoading = true;\n      state.isSuccess = false;\n    },\n    [__deleteComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments = state.comments.filter((comment) => comment.id !== action.payload\n      )\n    },\n    [__deleteComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport const {} = commentsSlice.actions;\nexport default commentsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}