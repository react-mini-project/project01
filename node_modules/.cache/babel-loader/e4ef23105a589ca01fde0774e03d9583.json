{"ast":null,"code":"var _jsxFileName = \"/Users/JJY/Desktop/react/dev/week-react-03/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\"; // axios import 합니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // 새롭게 생성하는 todo를 관리하는 state\n  const [todo, setTodo] = useState({\n    title: \"\"\n  });\n  const [todos, setTodos] = useState(null); // axios를 통해서 get 요청을 하는 함수를 생성합니다.\n  // 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n\n  const fetchTodos = async () => {\n    const {\n      data\n    } = await axios.get(\"http://localhost:3001/todos\");\n    setTodos(data); // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n  };\n\n  console.log(todo);\n\n  const onSubmitHandler = todo => {\n    axios.post(\"http://localhost:3001/todos\", todo);\n  }; // 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n\n\n  useEffect(() => {\n    // effect 구문에 생성한 함수를 넣어 실행합니다.\n    fetchTodos();\n  }, []); // data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n\n  console.log(todos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        // submit했을 때 브라우저의 새로고침을 방지합니다.\n        e.preventDefault();\n        onSubmitHandler(todo);\n        setTodo({\n          title: \"\"\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: todo.title,\n        type: \"text\",\n        onChange: e => {\n          const {\n            value\n          } = e.target;\n          setTodo({ ...todo,\n            title: value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\uCD94\\uAC00\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: todos === null || todos === void 0 ? void 0 : todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.title\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"X5QANI+HxT7iHWLdqPCtHb3jwdI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","App","todo","setTodo","title","todos","setTodos","fetchTodos","data","get","console","log","onSubmitHandler","post","e","preventDefault","value","target","map","id"],"sources":["/Users/JJY/Desktop/react/dev/week-react-03/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\" // axios import 합니다.\n\nconst App = () => {\n\t// 새롭게 생성하는 todo를 관리하는 state\n\tconst [todo, setTodo] = useState({\n\t\ttitle: \"\"\n\t})\n\n\tconst [todos, setTodos] = useState(null)\n\n\t// axios를 통해서 get 요청을 하는 함수를 생성합니다.\n\t// 비동기처리를 해야하므로 asyne/await 구문을 통해서 처리합니다.\n\tconst fetchTodos = async () => {\n\t\tconst {data} = await axios.get(\"http://localhost:3001/todos\")\n\t\tsetTodos(data)  // 서버로부터 fetching한 데이터를 useState의 state로 set합니다.\n\t}\n\tconsole.log(todo)\n\tconst onSubmitHandler = (todo) => {\n\t\taxios.post(\"http://localhost:3001/todos\", todo)\n\t}\n\n\t// 생성한 함수를 컴포넌트가 mount 됐을 때 실행하기 위해 useEffect를 사용합니다.\n\tuseEffect(()=> {\n\t\t// effect 구문에 생성한 함수를 넣어 실행합니다.\n\t\tfetchTodos()\n\t},[])\n\n\t// data fetching이 정상적으로 되었는지 콘솔을 통해 확인합니다.\n\tconsole.log(todos)\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={(e)=> {\n\t\t\t\t// submit했을 때 브라우저의 새로고침을 방지합니다.\n\t\t\t\te.preventDefault();\n\t\t\t\tonSubmitHandler(todo)\n\t\t\t\tsetTodo({title:\"\"})\n\t\t\t}}>\n\t\t\t\t<input\n\t\t\t\t\tvalue={todo.title}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={(e)=> {\n\t\t\t\t\t\tconst {value} = e.target;\n\t\t\t\t\t\tsetTodo({\n\t\t\t\t\t\t\t...todo, title: value\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<button>추가하기</button>\n\t\t\t</form>\n\t\t\t<div>\n\t\t\t\t{todos?.map((todo)=> (\n\t\t\t\t\t<div key={todo.id}>{todo.title}</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA0B;;;;AAE1B,MAAMC,GAAG,GAAG,MAAM;EAAA;;EACjB;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC;IAChCK,KAAK,EAAE;EADyB,CAAD,CAAhC;EAIA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC,CANiB,CAQjB;EACA;;EACA,MAAMQ,UAAU,GAAG,YAAY;IAC9B,MAAM;MAACC;IAAD,IAAS,MAAMR,KAAK,CAACS,GAAN,CAAU,6BAAV,CAArB;IACAH,QAAQ,CAACE,IAAD,CAAR,CAF8B,CAEd;EAChB,CAHD;;EAIAE,OAAO,CAACC,GAAR,CAAYT,IAAZ;;EACA,MAAMU,eAAe,GAAIV,IAAD,IAAU;IACjCF,KAAK,CAACa,IAAN,CAAW,6BAAX,EAA0CX,IAA1C;EACA,CAFD,CAfiB,CAmBjB;;;EACAJ,SAAS,CAAC,MAAK;IACd;IACAS,UAAU;EACV,CAHQ,EAGP,EAHO,CAAT,CApBiB,CAyBjB;;EACAG,OAAO,CAACC,GAAR,CAAYN,KAAZ;EAEA,oBACC;IAAA,wBACC;MAAM,QAAQ,EAAGS,CAAD,IAAM;QACrB;QACAA,CAAC,CAACC,cAAF;QACAH,eAAe,CAACV,IAAD,CAAf;QACAC,OAAO,CAAC;UAACC,KAAK,EAAC;QAAP,CAAD,CAAP;MACA,CALD;MAAA,wBAMC;QACC,KAAK,EAAEF,IAAI,CAACE,KADb;QAEC,IAAI,EAAC,MAFN;QAGC,QAAQ,EAAGU,CAAD,IAAM;UACf,MAAM;YAACE;UAAD,IAAUF,CAAC,CAACG,MAAlB;UACAd,OAAO,CAAC,EACP,GAAGD,IADI;YACEE,KAAK,EAAEY;UADT,CAAD,CAAP;QAGA;MARF;QAAA;QAAA;QAAA;MAAA,QAND,eAgBC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBD;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,eAmBC;MAAA,UACEX,KADF,aACEA,KADF,uBACEA,KAAK,CAAEa,GAAP,CAAYhB,IAAD,iBACX;QAAA,UAAoBA,IAAI,CAACE;MAAzB,GAAUF,IAAI,CAACiB,EAAf;QAAA;QAAA;QAAA;MAAA,QADA;IADF;MAAA;MAAA;MAAA;IAAA,QAnBD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AA2BA,CAvDD;;GAAMlB,G;;KAAAA,G;AAyDN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}